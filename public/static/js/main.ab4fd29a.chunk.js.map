{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","selectRef","useRef","useState","users","setUsers","selectedUser","setSelectedUser","userInfos","setUserInfos","loading","setLoading","useEffect","a","fetch","response","json","current","addEventListener","event","value","target","setUserInfo","getUserLoggedInUrl","user","text","url","getUserInfo","info","name","login","window","location","className","innerRef","map","key","onClick","disabled","class","Object","keys","userInfo","style","fontWeight","nick","attempts","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gPAwGeA,MAlGf,WACE,IAAMC,EAAYC,iBAAO,MADZ,EAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,OAG2BF,mBAAS,MAHpC,mBAGNG,EAHM,KAGQC,EAHR,OAIqBJ,mBAAS,IAJ9B,mBAINK,EAJM,KAIKC,EAJL,OAKiBN,oBAAS,GAL1B,mBAKNO,EALM,KAKGC,EALH,KAObC,qBAAU,WAsBR,OArBA,sBAAC,8BAAAC,EAAA,6DACCF,GAAW,GADZ,SAEwBG,MAAM,+BAF9B,cAEOC,EAFP,gBAGqBA,EAASC,OAH9B,OAGOZ,EAHP,OAKCC,EAASD,GACTO,GAAW,GANZ,0CAAD,GAeAV,EAAUgB,QAAQC,iBAAiB,UAAU,SAACC,GAC5C,IAAMC,EAAQD,EAAME,OAAOD,MAE3Bb,EAAgBa,MAGX,eACN,IAEHR,qBAAU,WACR,sBAAC,sBAAAC,EAAA,sEACOS,EAAYhB,GADnB,0CAAD,KAGC,CAACA,IAEJ,IAAMiB,EAAkB,uCAAG,WAAOC,GAAP,iBAAAX,EAAA,sEACFC,MAAM,uCAAD,OAAwCU,IAD3C,cACnBT,EADmB,gBAEPA,EAASU,OAFF,cAEnBC,EAFmB,yBAIlBA,GAJkB,2CAAH,sDAOlBC,EAAW,uCAAG,WAAOH,GAAP,iBAAAX,EAAA,sEACKC,MAAM,mCAAD,OAAoCU,IAD9C,cACZT,EADY,gBAECA,EAASC,OAFV,cAEZY,EAFY,yBAIXA,GAJW,2CAAH,sDAOXN,EAAW,uCAAG,WAAOO,GAAP,eAAAhB,EAAA,sEACCc,EAAYE,GADb,OACZD,EADY,OAGlBnB,EAAa,2BAAKD,GAAN,kBAAkBqB,EAAOD,KAHnB,2CAAH,sDAMXE,EAAK,uCAAG,4BAAAjB,EAAA,6DACZF,GAAW,GADC,SAEMY,EAAmBjB,GAFzB,OAENoB,EAFM,OAIZK,OAAOC,SAAWN,EAClBf,GAAW,GALC,2CAAH,qDAQX,OACE,yBAAKsB,UAAU,OACb,kBAAC,IAAD,CAAYC,SAAUjC,GACpB,8CACCG,EAAM+B,KAAI,SAACN,GACV,OAAQ,4BAAQT,MAAOS,EAAMO,IAAKP,GAAOA,OAG7C,6BACA,kBAAC,WAAD,MACInB,GACA,kBAAC,IAAD,CAAQ2B,QAASP,EAAOQ,UAAWhC,GAAnC,YAGDI,GAAW,yBAAK6B,MAAM,YAEzB,6BACGC,OAAOC,KAAKjC,GAAW2B,KAAI,SAACN,GAC3B,IAAMa,EAAWlC,EAAUqB,GAE3B,OACE,yBAAKO,IAAKP,GACR,yBAAKc,MAAO,CAAEC,WAAY,SAAWF,EAASG,KAA9C,KACA,6BAAMH,EAASI,iBCnFTC,QACW,cAA7BhB,OAAOC,SAASgB,UAEe,UAA7BjB,OAAOC,SAASgB,UAEhBjB,OAAOC,SAASgB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ab4fd29a.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef, Fragment } from 'react';\nimport { Button } from \"shards-react\"\nimport { FormSelect } from \"shards-react\";\nimport \"shards-ui/dist/css/shards.min.css\"\nimport './App.css';\n\nfunction App() {\n  const selectRef = useRef(null);\n  const [users, setUsers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [userInfos, setUserInfos] = useState({ });\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      setLoading(true);\n      const response = await fetch('/users');\n      const users = await response.json();\n\n      setUsers(users);\n      setLoading(false);\n\n      // for (let i = 0; i < users.length; i ++) {\n      //   const name = users[i];\n\n        \n      // }\n    })();\n\n    selectRef.current.addEventListener('change', (event) => {\n      const value = event.target.value;\n\n      setSelectedUser(value);\n    });\n\n    return () => { };\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      await setUserInfo(selectedUser);\n    })();\n  }, [selectedUser])\n\n  const getUserLoggedInUrl = async (user) => {\n    const response = await fetch(`/logged-in-url/${user}`);\n    const url = await response.text();\n\n    return url;\n  };\n\n  const getUserInfo = async (user) => {\n    const response = await fetch(`/user-info/${user}`);\n    const info = await response.json();\n\n    return info;\n  };\n\n  const setUserInfo = async (name) => {\n    const info = await getUserInfo(name);\n\n    setUserInfos({ ...userInfos, [name]: info });\n  };\n\n  const login = async () => {\n    setLoading(true);\n    const url = await getUserLoggedInUrl(selectedUser);\n\n    window.location = url;\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <FormSelect innerRef={selectRef}>\n        <option>Ingen vald</option>\n        {users.map((name) => {\n          return (<option value={name} key={name}>{name}</option>)\n        })}\n      </FormSelect>\n      <br />\n      <Fragment>\n        {!loading &&\n          <Button onClick={login} disabled={!selectedUser}>\n            Logga in\n          </Button>}\n        {loading && <div class=\"loader\"></div>}\n      </Fragment>\n      <div>\n        {Object.keys(userInfos).map((name) => {\n          const userInfo = userInfos[name];\n\n          return (\n            <div key={name}>\n              <div style={{ fontWeight: 'bold' }}>{userInfo.nick}:</div>\n              <div>{userInfo.attempts}</div>\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}